// <auto-generated />
using System;
using ITProjectPriceCalculationManager.ITProjectsManager.API.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITProjectPriceCalculationManager.ITProjectsManager.API.Migrations
{
    [DbContext(typeof(ITProjectPriceCalculationManagerDbContext))]
    [Migration("20230602172041_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Application.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageCostLabor")
                        .HasColumnType("float");

                    b.Property<double>("AverageMonthlyRateWorkingHours")
                        .HasColumnType("float");

                    b.Property<double?>("ConfidenceArea")
                        .HasColumnType("float");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Overhead")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Profit")
                        .HasColumnType("float");

                    b.Property<double>("SocialInsurance")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ApplicationToEstimators.ApplicationToEstimators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("EstimatorId")
                        .HasColumnType("int");

                    b.Property<double?>("SelfEvaluation")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EstimatorId");

                    b.ToTable("ApplicationToEstimators");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ApplicationToFactors.ApplicationToFactors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("DifficultyLevelsTypeToFactorTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DifficultyLevelsTypeToFactorTypeId");

                    b.ToTable("ApplicationToFactors");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Attribute.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attributes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Qualifications(PERS)"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Experience(PREX)"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Technical support(FCIL)"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Schedule restrictions(SCED)"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Complexity of the program environment(PDIF)"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Complexity and reliability(RCPX)"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Reuse requested(RUSE)"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Product novelty for the developer's company(PREC)"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Development flexibility(FLEX)"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Level of risk/architecture management (%)(RESL)"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Cohesion of the development team(TEAM)"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Technology maturity maturity process development(PMAT)"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Internal logical object"
                        },
                        new
                        {
                            Id = 14,
                            Name = "External interface object"
                        },
                        new
                        {
                            Id = 15,
                            Name = "External input"
                        },
                        new
                        {
                            Id = 16,
                            Name = "External output"
                        },
                        new
                        {
                            Id = 17,
                            Name = "External request"
                        });
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Department.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.DifficultyLevelsType.DifficultyLevelsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DifficultyLevelsTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Super low"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Very low"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Normal"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 6,
                            Name = "High"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Very high"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Super high"
                        });
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.DifficultyLevelsTypeToFactorType.DifficultyLevelsTypeToFactorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DifficultyLevelId")
                        .HasColumnType("int");

                    b.Property<int>("FactorId")
                        .HasColumnType("int");

                    b.Property<int>("FactorTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyLevelId");

                    b.HasIndex("FactorId");

                    b.HasIndex("FactorTypeId");

                    b.ToTable("DifficultyLevelsTypeToFactorTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DifficultyLevelId = 3,
                            FactorId = 13,
                            FactorTypeId = 3,
                            Value = 7.0
                        },
                        new
                        {
                            Id = 2,
                            DifficultyLevelId = 5,
                            FactorId = 13,
                            FactorTypeId = 3,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 3,
                            DifficultyLevelId = 6,
                            FactorId = 13,
                            FactorTypeId = 3,
                            Value = 15.0
                        },
                        new
                        {
                            Id = 4,
                            DifficultyLevelId = 3,
                            FactorId = 14,
                            FactorTypeId = 3,
                            Value = 5.0
                        },
                        new
                        {
                            Id = 5,
                            DifficultyLevelId = 5,
                            FactorId = 14,
                            FactorTypeId = 3,
                            Value = 7.0
                        },
                        new
                        {
                            Id = 6,
                            DifficultyLevelId = 6,
                            FactorId = 14,
                            FactorTypeId = 3,
                            Value = 10.0
                        },
                        new
                        {
                            Id = 7,
                            DifficultyLevelId = 1,
                            FactorId = 1,
                            FactorTypeId = 1,
                            Value = 2.1200000000000001
                        },
                        new
                        {
                            Id = 8,
                            DifficultyLevelId = 2,
                            FactorId = 1,
                            FactorTypeId = 1,
                            Value = 1.6200000000000001
                        },
                        new
                        {
                            Id = 9,
                            DifficultyLevelId = 3,
                            FactorId = 1,
                            FactorTypeId = 1,
                            Value = 1.26
                        },
                        new
                        {
                            Id = 10,
                            DifficultyLevelId = 4,
                            FactorId = 1,
                            FactorTypeId = 1,
                            Value = 1.0
                        },
                        new
                        {
                            Id = 11,
                            DifficultyLevelId = 6,
                            FactorId = 1,
                            FactorTypeId = 1,
                            Value = 0.82999999999999996
                        },
                        new
                        {
                            Id = 12,
                            DifficultyLevelId = 7,
                            FactorId = 1,
                            FactorTypeId = 1,
                            Value = 0.63
                        },
                        new
                        {
                            Id = 13,
                            DifficultyLevelId = 8,
                            FactorId = 1,
                            FactorTypeId = 1,
                            Value = 0.5
                        },
                        new
                        {
                            Id = 14,
                            DifficultyLevelId = 1,
                            FactorId = 2,
                            FactorTypeId = 1,
                            Value = 1.5900000000000001
                        },
                        new
                        {
                            Id = 15,
                            DifficultyLevelId = 2,
                            FactorId = 2,
                            FactorTypeId = 1,
                            Value = 1.3300000000000001
                        },
                        new
                        {
                            Id = 16,
                            DifficultyLevelId = 3,
                            FactorId = 2,
                            FactorTypeId = 1,
                            Value = 1.1200000000000001
                        },
                        new
                        {
                            Id = 17,
                            DifficultyLevelId = 4,
                            FactorId = 2,
                            FactorTypeId = 1,
                            Value = 1.0
                        },
                        new
                        {
                            Id = 18,
                            DifficultyLevelId = 6,
                            FactorId = 2,
                            FactorTypeId = 1,
                            Value = 0.87
                        },
                        new
                        {
                            Id = 19,
                            DifficultyLevelId = 7,
                            FactorId = 2,
                            FactorTypeId = 1,
                            Value = 0.70999999999999996
                        },
                        new
                        {
                            Id = 20,
                            DifficultyLevelId = 8,
                            FactorId = 2,
                            FactorTypeId = 1,
                            Value = 0.62
                        },
                        new
                        {
                            Id = 21,
                            DifficultyLevelId = 1,
                            FactorId = 3,
                            FactorTypeId = 1,
                            Value = 1.4299999999999999
                        },
                        new
                        {
                            Id = 22,
                            DifficultyLevelId = 2,
                            FactorId = 3,
                            FactorTypeId = 1,
                            Value = 1.3
                        },
                        new
                        {
                            Id = 23,
                            DifficultyLevelId = 3,
                            FactorId = 3,
                            FactorTypeId = 1,
                            Value = 1.1000000000000001
                        },
                        new
                        {
                            Id = 24,
                            DifficultyLevelId = 4,
                            FactorId = 3,
                            FactorTypeId = 1,
                            Value = 1.0
                        },
                        new
                        {
                            Id = 25,
                            DifficultyLevelId = 6,
                            FactorId = 3,
                            FactorTypeId = 1,
                            Value = 0.87
                        },
                        new
                        {
                            Id = 26,
                            DifficultyLevelId = 7,
                            FactorId = 3,
                            FactorTypeId = 1,
                            Value = 0.72999999999999998
                        },
                        new
                        {
                            Id = 27,
                            DifficultyLevelId = 8,
                            FactorId = 3,
                            FactorTypeId = 1,
                            Value = 0.62
                        },
                        new
                        {
                            Id = 28,
                            DifficultyLevelId = 1,
                            FactorId = 4,
                            FactorTypeId = 1,
                            Value = 0.0
                        },
                        new
                        {
                            Id = 29,
                            DifficultyLevelId = 2,
                            FactorId = 4,
                            FactorTypeId = 1,
                            Value = 1.4299999999999999
                        },
                        new
                        {
                            Id = 30,
                            DifficultyLevelId = 3,
                            FactorId = 4,
                            FactorTypeId = 1,
                            Value = 1.1399999999999999
                        },
                        new
                        {
                            Id = 31,
                            DifficultyLevelId = 4,
                            FactorId = 4,
                            FactorTypeId = 1,
                            Value = 1.0
                        },
                        new
                        {
                            Id = 32,
                            DifficultyLevelId = 6,
                            FactorId = 4,
                            FactorTypeId = 1,
                            Value = 1.0
                        },
                        new
                        {
                            Id = 33,
                            DifficultyLevelId = 7,
                            FactorId = 4,
                            FactorTypeId = 1,
                            Value = 1.0
                        },
                        new
                        {
                            Id = 34,
                            DifficultyLevelId = 8,
                            FactorId = 4,
                            FactorTypeId = 1,
                            Value = 0.0
                        },
                        new
                        {
                            Id = 35,
                            DifficultyLevelId = 1,
                            FactorId = 5,
                            FactorTypeId = 1,
                            Value = 0.0
                        },
                        new
                        {
                            Id = 36,
                            DifficultyLevelId = 2,
                            FactorId = 5,
                            FactorTypeId = 1,
                            Value = 0.0
                        },
                        new
                        {
                            Id = 37,
                            DifficultyLevelId = 3,
                            FactorId = 5,
                            FactorTypeId = 1,
                            Value = 0.87
                        },
                        new
                        {
                            Id = 38,
                            DifficultyLevelId = 4,
                            FactorId = 5,
                            FactorTypeId = 1,
                            Value = 1.0
                        },
                        new
                        {
                            Id = 39,
                            DifficultyLevelId = 6,
                            FactorId = 5,
                            FactorTypeId = 1,
                            Value = 1.29
                        },
                        new
                        {
                            Id = 40,
                            DifficultyLevelId = 7,
                            FactorId = 5,
                            FactorTypeId = 1,
                            Value = 1.8100000000000001
                        },
                        new
                        {
                            Id = 41,
                            DifficultyLevelId = 8,
                            FactorId = 5,
                            FactorTypeId = 1,
                            Value = 2.6099999999999999
                        },
                        new
                        {
                            Id = 42,
                            DifficultyLevelId = 1,
                            FactorId = 6,
                            FactorTypeId = 1,
                            Value = 0.48999999999999999
                        },
                        new
                        {
                            Id = 43,
                            DifficultyLevelId = 2,
                            FactorId = 6,
                            FactorTypeId = 1,
                            Value = 0.59999999999999998
                        },
                        new
                        {
                            Id = 44,
                            DifficultyLevelId = 3,
                            FactorId = 6,
                            FactorTypeId = 1,
                            Value = 0.82999999999999996
                        },
                        new
                        {
                            Id = 45,
                            DifficultyLevelId = 4,
                            FactorId = 6,
                            FactorTypeId = 1,
                            Value = 1.0
                        },
                        new
                        {
                            Id = 46,
                            DifficultyLevelId = 6,
                            FactorId = 6,
                            FactorTypeId = 1,
                            Value = 1.3300000000000001
                        },
                        new
                        {
                            Id = 47,
                            DifficultyLevelId = 7,
                            FactorId = 6,
                            FactorTypeId = 1,
                            Value = 1.97
                        },
                        new
                        {
                            Id = 48,
                            DifficultyLevelId = 8,
                            FactorId = 6,
                            FactorTypeId = 1,
                            Value = 2.7200000000000002
                        },
                        new
                        {
                            Id = 49,
                            DifficultyLevelId = 1,
                            FactorId = 7,
                            FactorTypeId = 1,
                            Value = 0.0
                        },
                        new
                        {
                            Id = 50,
                            DifficultyLevelId = 2,
                            FactorId = 7,
                            FactorTypeId = 1,
                            Value = 0.0
                        },
                        new
                        {
                            Id = 51,
                            DifficultyLevelId = 3,
                            FactorId = 7,
                            FactorTypeId = 1,
                            Value = 0.94999999999999996
                        },
                        new
                        {
                            Id = 52,
                            DifficultyLevelId = 4,
                            FactorId = 7,
                            FactorTypeId = 1,
                            Value = 1.0
                        },
                        new
                        {
                            Id = 53,
                            DifficultyLevelId = 6,
                            FactorId = 7,
                            FactorTypeId = 1,
                            Value = 1.0700000000000001
                        },
                        new
                        {
                            Id = 54,
                            DifficultyLevelId = 7,
                            FactorId = 7,
                            FactorTypeId = 1,
                            Value = 1.1499999999999999
                        },
                        new
                        {
                            Id = 55,
                            DifficultyLevelId = 8,
                            FactorId = 7,
                            FactorTypeId = 1,
                            Value = 1.24
                        },
                        new
                        {
                            Id = 56,
                            DifficultyLevelId = 2,
                            FactorId = 8,
                            FactorTypeId = 2,
                            Value = 6.2000000000000002
                        },
                        new
                        {
                            Id = 57,
                            DifficultyLevelId = 3,
                            FactorId = 8,
                            FactorTypeId = 2,
                            Value = 4.96
                        },
                        new
                        {
                            Id = 58,
                            DifficultyLevelId = 4,
                            FactorId = 8,
                            FactorTypeId = 2,
                            Value = 3.7200000000000002
                        },
                        new
                        {
                            Id = 59,
                            DifficultyLevelId = 6,
                            FactorId = 8,
                            FactorTypeId = 2,
                            Value = 2.48
                        },
                        new
                        {
                            Id = 60,
                            DifficultyLevelId = 7,
                            FactorId = 8,
                            FactorTypeId = 2,
                            Value = 1.24
                        },
                        new
                        {
                            Id = 61,
                            DifficultyLevelId = 8,
                            FactorId = 8,
                            FactorTypeId = 2,
                            Value = 0.0
                        },
                        new
                        {
                            Id = 62,
                            DifficultyLevelId = 2,
                            FactorId = 9,
                            FactorTypeId = 2,
                            Value = 5.0700000000000003
                        },
                        new
                        {
                            Id = 63,
                            DifficultyLevelId = 3,
                            FactorId = 9,
                            FactorTypeId = 2,
                            Value = 4.0499999999999998
                        },
                        new
                        {
                            Id = 64,
                            DifficultyLevelId = 4,
                            FactorId = 9,
                            FactorTypeId = 2,
                            Value = 3.04
                        },
                        new
                        {
                            Id = 65,
                            DifficultyLevelId = 6,
                            FactorId = 9,
                            FactorTypeId = 2,
                            Value = 2.0299999999999998
                        },
                        new
                        {
                            Id = 66,
                            DifficultyLevelId = 7,
                            FactorId = 9,
                            FactorTypeId = 2,
                            Value = 1.01
                        },
                        new
                        {
                            Id = 67,
                            DifficultyLevelId = 8,
                            FactorId = 9,
                            FactorTypeId = 2,
                            Value = 0.0
                        },
                        new
                        {
                            Id = 68,
                            DifficultyLevelId = 2,
                            FactorId = 10,
                            FactorTypeId = 2,
                            Value = 7.0700000000000003
                        },
                        new
                        {
                            Id = 69,
                            DifficultyLevelId = 3,
                            FactorId = 10,
                            FactorTypeId = 2,
                            Value = 5.6500000000000004
                        },
                        new
                        {
                            Id = 70,
                            DifficultyLevelId = 4,
                            FactorId = 10,
                            FactorTypeId = 2,
                            Value = 4.2400000000000002
                        },
                        new
                        {
                            Id = 71,
                            DifficultyLevelId = 6,
                            FactorId = 10,
                            FactorTypeId = 2,
                            Value = 2.8300000000000001
                        },
                        new
                        {
                            Id = 72,
                            DifficultyLevelId = 7,
                            FactorId = 10,
                            FactorTypeId = 2,
                            Value = 1.4099999999999999
                        },
                        new
                        {
                            Id = 73,
                            DifficultyLevelId = 8,
                            FactorId = 10,
                            FactorTypeId = 2,
                            Value = 0.0
                        },
                        new
                        {
                            Id = 74,
                            DifficultyLevelId = 2,
                            FactorId = 11,
                            FactorTypeId = 2,
                            Value = 5.4800000000000004
                        },
                        new
                        {
                            Id = 75,
                            DifficultyLevelId = 3,
                            FactorId = 11,
                            FactorTypeId = 2,
                            Value = 4.3799999999999999
                        },
                        new
                        {
                            Id = 76,
                            DifficultyLevelId = 4,
                            FactorId = 11,
                            FactorTypeId = 2,
                            Value = 3.29
                        },
                        new
                        {
                            Id = 77,
                            DifficultyLevelId = 6,
                            FactorId = 11,
                            FactorTypeId = 2,
                            Value = 2.1899999999999999
                        },
                        new
                        {
                            Id = 78,
                            DifficultyLevelId = 7,
                            FactorId = 11,
                            FactorTypeId = 2,
                            Value = 1.1000000000000001
                        },
                        new
                        {
                            Id = 79,
                            DifficultyLevelId = 8,
                            FactorId = 11,
                            FactorTypeId = 2,
                            Value = 0.0
                        },
                        new
                        {
                            Id = 80,
                            DifficultyLevelId = 2,
                            FactorId = 12,
                            FactorTypeId = 2,
                            Value = 7.7999999999999998
                        },
                        new
                        {
                            Id = 81,
                            DifficultyLevelId = 3,
                            FactorId = 12,
                            FactorTypeId = 2,
                            Value = 6.2400000000000002
                        },
                        new
                        {
                            Id = 82,
                            DifficultyLevelId = 4,
                            FactorId = 12,
                            FactorTypeId = 2,
                            Value = 4.6799999999999997
                        },
                        new
                        {
                            Id = 83,
                            DifficultyLevelId = 6,
                            FactorId = 12,
                            FactorTypeId = 2,
                            Value = 3.1200000000000001
                        },
                        new
                        {
                            Id = 84,
                            DifficultyLevelId = 7,
                            FactorId = 12,
                            FactorTypeId = 2,
                            Value = 1.5600000000000001
                        },
                        new
                        {
                            Id = 85,
                            DifficultyLevelId = 8,
                            FactorId = 12,
                            FactorTypeId = 2,
                            Value = 0.0
                        },
                        new
                        {
                            Id = 86,
                            DifficultyLevelId = 3,
                            FactorId = 15,
                            FactorTypeId = 4,
                            Value = 3.0
                        },
                        new
                        {
                            Id = 87,
                            DifficultyLevelId = 5,
                            FactorId = 15,
                            FactorTypeId = 4,
                            Value = 4.0
                        },
                        new
                        {
                            Id = 88,
                            DifficultyLevelId = 6,
                            FactorId = 15,
                            FactorTypeId = 4,
                            Value = 6.0
                        },
                        new
                        {
                            Id = 89,
                            DifficultyLevelId = 3,
                            FactorId = 16,
                            FactorTypeId = 4,
                            Value = 4.0
                        },
                        new
                        {
                            Id = 90,
                            DifficultyLevelId = 5,
                            FactorId = 16,
                            FactorTypeId = 4,
                            Value = 5.0
                        },
                        new
                        {
                            Id = 91,
                            DifficultyLevelId = 6,
                            FactorId = 16,
                            FactorTypeId = 4,
                            Value = 7.0
                        },
                        new
                        {
                            Id = 92,
                            DifficultyLevelId = 3,
                            FactorId = 17,
                            FactorTypeId = 4,
                            Value = 3.0
                        },
                        new
                        {
                            Id = 93,
                            DifficultyLevelId = 3,
                            FactorId = 17,
                            FactorTypeId = 4,
                            Value = 4.0
                        },
                        new
                        {
                            Id = 94,
                            DifficultyLevelId = 3,
                            FactorId = 17,
                            FactorTypeId = 4,
                            Value = 6.0
                        });
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Estimator.Estimator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Estimators");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.EvaluatorToEvaluatedFactor.EvaluatorToEvaluatedFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EvaluatedFactorId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatedFactorId");

                    b.HasIndex("EvaluatorId");

                    b.ToTable("EvaluatorToEvaluatedFactors");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.FactorType.FactorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FactorTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Influence factor"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Scale factor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Information object"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Function"
                        });
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Profile.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int>("EstimatorId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("EstimatorId");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ProgramLanguage.ProgramLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("SLOC")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProgramLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ABAP (SAP)",
                            SLOC = 28
                        },
                        new
                        {
                            Id = 2,
                            Name = "ASP",
                            SLOC = 51
                        },
                        new
                        {
                            Id = 3,
                            Name = "Assembler",
                            SLOC = 119
                        },
                        new
                        {
                            Id = 4,
                            Name = "Brio +",
                            SLOC = 14
                        },
                        new
                        {
                            Id = 5,
                            Name = "C",
                            SLOC = 97
                        },
                        new
                        {
                            Id = 6,
                            Name = "C++",
                            SLOC = 50
                        },
                        new
                        {
                            Id = 7,
                            Name = "C#",
                            SLOC = 54
                        },
                        new
                        {
                            Id = 8,
                            Name = "COBOL",
                            SLOC = 61
                        },
                        new
                        {
                            Id = 9,
                            Name = "Cognos Impromptu Scripts +",
                            SLOC = 47
                        },
                        new
                        {
                            Id = 10,
                            Name = "Cross System Products (CSP) +",
                            SLOC = 20
                        },
                        new
                        {
                            Id = 11,
                            Name = "Cool:Gen/IEF",
                            SLOC = 32
                        },
                        new
                        {
                            Id = 12,
                            Name = "Datastage",
                            SLOC = 71
                        },
                        new
                        {
                            Id = 13,
                            Name = "Excel",
                            SLOC = 209
                        },
                        new
                        {
                            Id = 14,
                            Name = "Focus",
                            SLOC = 43
                        },
                        new
                        {
                            Id = 15,
                            Name = "FoxPro",
                            SLOC = 36
                        },
                        new
                        {
                            Id = 16,
                            Name = "HTML",
                            SLOC = 34
                        },
                        new
                        {
                            Id = 17,
                            Name = "J2EE",
                            SLOC = 46
                        },
                        new
                        {
                            Id = 18,
                            Name = "Java",
                            SLOC = 53
                        },
                        new
                        {
                            Id = 19,
                            Name = "JavaScript",
                            SLOC = 47
                        },
                        new
                        {
                            Id = 20,
                            Name = "JCL",
                            SLOC = 62
                        },
                        new
                        {
                            Id = 21,
                            Name = "LINC II",
                            SLOC = 29
                        },
                        new
                        {
                            Id = 22,
                            Name = "Lotus Notes",
                            SLOC = 23
                        },
                        new
                        {
                            Id = 23,
                            Name = "Natural",
                            SLOC = 40
                        },
                        new
                        {
                            Id = 24,
                            Name = ".NET",
                            SLOC = 57
                        },
                        new
                        {
                            Id = 25,
                            Name = "Oracle",
                            SLOC = 37
                        });
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ProgramsParametr.ProgramsParametr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramLanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ProgramLanguageId");

                    b.ToTable("ProgramsParametrs");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ProgramsParametrToSubjectAreaElement.ProgramsParametrToSubjectAreaElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProgramsParametrId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectAreaElementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramsParametrId");

                    b.HasIndex("SubjectAreaElementId");

                    b.ToTable("ProgramsParametrToSubjectAreaElements");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Application.Application", b =>
                {
                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Estimator.Estimator", "Creator")
                        .WithMany("Applications")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ApplicationToEstimators.ApplicationToEstimators", b =>
                {
                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Application.Application", "Application")
                        .WithMany("ApplicationToEstimators")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Estimator.Estimator", "Estimator")
                        .WithMany("ApplicationToEstimators")
                        .HasForeignKey("EstimatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Estimator");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ApplicationToFactors.ApplicationToFactors", b =>
                {
                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Application.Application", "Application")
                        .WithMany("Factors")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.DifficultyLevelsTypeToFactorType.DifficultyLevelsTypeToFactorType", "DifficultyLevelsTypeToFactorType")
                        .WithMany("ApplicationToFactors")
                        .HasForeignKey("DifficultyLevelsTypeToFactorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("DifficultyLevelsTypeToFactorType");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Department.Department", b =>
                {
                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Department.Department", "Parent")
                        .WithMany("SubDepartments")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.DifficultyLevelsTypeToFactorType.DifficultyLevelsTypeToFactorType", b =>
                {
                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.DifficultyLevelsType.DifficultyLevelsType", "DifficultyLevel")
                        .WithMany("DifficultyLevelsTypeToFactorTypes")
                        .HasForeignKey("DifficultyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Attribute.Attribute", "Factor")
                        .WithMany("DifficultyLevelsTypeToFactorTypes")
                        .HasForeignKey("FactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.FactorType.FactorType", "FactorType")
                        .WithMany("DifficultyLevelsTypeToFactorTypes")
                        .HasForeignKey("FactorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DifficultyLevel");

                    b.Navigation("Factor");

                    b.Navigation("FactorType");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Estimator.Estimator", b =>
                {
                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Department.Department", "Department")
                        .WithMany("Estimators")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.EvaluatorToEvaluatedFactor.EvaluatorToEvaluatedFactor", b =>
                {
                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ApplicationToFactors.ApplicationToFactors", "EvaluatedFactor")
                        .WithMany("EvaluatorToEvaluatedFactor")
                        .HasForeignKey("EvaluatedFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Estimator.Estimator", "Evaluator")
                        .WithMany("EvaluatorToEvaluatedFactor")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluatedFactor");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Profile.Profile", b =>
                {
                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Attribute.Attribute", "Attribute")
                        .WithMany("Profiles")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Estimator.Estimator", "Estimator")
                        .WithMany("Profiles")
                        .HasForeignKey("EstimatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Estimator");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ProgramsParametr.ProgramsParametr", b =>
                {
                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Application.Application", "Application")
                        .WithMany("ProgramsParametrs")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ProgramLanguage.ProgramLanguage", "ProgramLanguage")
                        .WithMany("ProgramsParametrs")
                        .HasForeignKey("ProgramLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("ProgramLanguage");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ProgramsParametrToSubjectAreaElement.ProgramsParametrToSubjectAreaElement", b =>
                {
                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ProgramsParametr.ProgramsParametr", "ProgramsParametr")
                        .WithMany("ProgramsParametrToSubjectAreaElements")
                        .HasForeignKey("ProgramsParametrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ApplicationToFactors.ApplicationToFactors", "SubjectAreaElement")
                        .WithMany("ProgramsParametrToSubjectAreaElements")
                        .HasForeignKey("SubjectAreaElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramsParametr");

                    b.Navigation("SubjectAreaElement");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Application.Application", b =>
                {
                    b.Navigation("ApplicationToEstimators");

                    b.Navigation("Factors");

                    b.Navigation("ProgramsParametrs");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ApplicationToFactors.ApplicationToFactors", b =>
                {
                    b.Navigation("EvaluatorToEvaluatedFactor");

                    b.Navigation("ProgramsParametrToSubjectAreaElements");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Attribute.Attribute", b =>
                {
                    b.Navigation("DifficultyLevelsTypeToFactorTypes");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Department.Department", b =>
                {
                    b.Navigation("Estimators");

                    b.Navigation("SubDepartments");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.DifficultyLevelsType.DifficultyLevelsType", b =>
                {
                    b.Navigation("DifficultyLevelsTypeToFactorTypes");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.DifficultyLevelsTypeToFactorType.DifficultyLevelsTypeToFactorType", b =>
                {
                    b.Navigation("ApplicationToFactors");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.Estimator.Estimator", b =>
                {
                    b.Navigation("ApplicationToEstimators");

                    b.Navigation("Applications");

                    b.Navigation("EvaluatorToEvaluatedFactor");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.FactorType.FactorType", b =>
                {
                    b.Navigation("DifficultyLevelsTypeToFactorTypes");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ProgramLanguage.ProgramLanguage", b =>
                {
                    b.Navigation("ProgramsParametrs");
                });

            modelBuilder.Entity("ITProjectPriceCalculationManager.ITProjectsManager.API.Core.Entities.ProgramsParametr.ProgramsParametr", b =>
                {
                    b.Navigation("ProgramsParametrToSubjectAreaElements");
                });
#pragma warning restore 612, 618
        }
    }
}
